CREATE DATABASE SNAPSHOP;
USE SNAPSHOP;
CREATE TABLE user(
    Phone_Number VARCHAR(10) PRIMARY KEY,
    First_Name VARCHAR(20) NOT NULL,
    Last_Name VARCHAR(20) NOT NULL,
    House_Number INT NOT NULL,
    Colony VARCHAR(40) NOT NULL,
    City VARCHAR(20) NOT NULL,
    DOB DATE,
    User_Rating DECIMAL(4,2)
);

CREATE TABLE Product(
    Phone_Number VARCHAR(20) NOT NULL,
    Product_ID INT PRIMARY KEY AUTO_INCREMENT,
    Price DECIMAL(6,2) NOT NULL,
    Size CHAR(1) NOT NULL,
    Gender CHAR(1),
    Category VARCHAR(20),
    Product_Name VARCHAR(20),
    FOREIGN KEY (Phone_Number) REFERENCES user(Phone_Number)
);

CREATE TABLE Wishlist(
    Phone_Number VARCHAR(10),
    FOREIGN KEY(Phone_Number) REFERENCES user(Phone_Number),
    Product_ID INT,
    FOREIGN KEY(Product_ID) REFERENCES product(Product_ID)
);

CREATE TABLE Payment(     
    Phone_Number VARCHAR(10) NOT NULL,     
    FOREIGN KEY(Phone_Number) REFERENCES user(Phone_Number),     
    Payment_ID INT AUTO_INCREMENT PRIMARY KEY,     
    Total_Cost INT NOT NULL,     
    Card_expiry_Date DATE NOT NULL,     
    Card_Number VARCHAR(12) NOT NULL)auto_increment=1000;

CREATE TABLE `Order` (     
	Order_ID INT AUTO_INCREMENT PRIMARY KEY,     
	Order_Date DATE,     
	Phone_Number VARCHAR(10) NOT NULL,     
	FOREIGN KEY(Phone_Number) REFERENCES user(Phone_Number),     
	Total_Cost INT NOT NULL,     
	Payment_ID INT UNIQUE,     
	FOREIGN KEY(Payment_ID) REFERENCES payment(Payment_ID) 
)auto_increment=508;

CREATE TABLE Order_Info(  
    Order_ID INT,     
    FOREIGN KEY(Order_ID) REFERENCES `order`(order_ID),     
    Product_ID INT,     
    FOREIGN KEY(Product_ID) REFERENCES Product(product_ID)
);

CREATE TABLE CART(    
    Phone_Number VARCHAR(10) UNIQUE,     
    FOREIGN KEY(Phone_Number) REFERENCES user(Phone_Number),     
    Total_Cost INT NOT NULL,     
    Cart_ID INT AUTO_INCREMENT PRIMARY KEY
)auto_increment=18;

CREATE TABLE Cart_Info( 
    Cart_ID INT,     
    FOREIGN KEY(Cart_ID) REFERENCES Cart(Cart_ID),     
    Product_ID INT,     
    FOREIGN KEY(Product_ID) REFERENCES product(Product_ID)
);

CREATE TABLE Feedback(
    Phone_Number VARCHAR(10),
    FOREIGN KEY(Phone_Number) REFERENCES user(Phone_Number),
    Feedback_ID INT AUTO_INCREMENT PRIMARY KEY,
    Rating DECIMAL(4,2),
    Feedback VARCHAR(50),
    Order_ID INT UNIQUE NOT NULL,
    FOREIGN KEY(Order_ID) REFERENCES `order`(Order_ID)
);

INSERT INTO USER(Phone_Number, First_Name, Last_Name, House_Number, Colony, City, DOB, User_Rating) VALUES 
	("9810572925", "Snehil", "Jaiswal", "24", "Lotus Boulevard", "Noida", "2004-09-19", "0"),     
	("7404476034" , "Aditya", "Bagri", "17", "NohariaBazar", "Sirsa", "2004-11-02", "0"),  
	("1111111111", "Harsh" , "Mogra" , "83" , "DilshadGarden", "New Delhi", "2003-09-23", "0"),  
	("8989898989", "Sidak" , "Singh" , "228" , "systummkeniche", "Rudrapur", "2004-05-22", "0"),  
	("6969696969", "Rishit" , "Gupta" , "16" , "SuryaNagar Colony", "Ghaziabad" , "2003-11-28", "0"),  
    ("8888888888", "Swapnil" , "Verma" , "8" , "Charminar", "Hyderabad", "2004-05-06", "0"),  
    ("0000000000", "Ritviek" , "Padda" , "09" , "Punjabi Bagh", "New Delhi", "2004-03-06", "0"),  
    ("0909090909", "Yatin" , "Rathore" , "239" , "Paschim Vihar", "New Delhi", "2004-11-02", "0"),  
    ("9876543210", "Prakhar" , "Yadav" , "4" , "Opp. Theka", "Rewari", "2004-03-19", "0"),  
    ("7777777777" , "Ankita" , "Kanda" , "57" , "Sukhdev Vihar", "New Delhi", "2005-04-24", "0");


ALTER TABLE Product
MODIFY COLUMN Size CHAR(5);

INSERT INTO Product (Phone_Number, Price, SIze, Gender, Category) VALUE 
    ("7404476034", "560", "M", "F", "T-shirt"), 
    ("6969696969", "800", "L", "M", "Jacket"), 
    ("9810572925", "699", "S", "M", "Shorts"), 
    ("9810572925", "786", "XL", "M", "Jeans"), 
    ("8989898989", "1000","XS", "F", "Trousers"), 
    ("0909090909", "569", "M", "F", "Shirt"), 
    ("0909090909", "420", "S", "F", "Cargos"), 
    ("9810572925", "696", "M", "U", "Denims"), 
    ("6969696969", "6000", "XXL", "F", "Skirt"), 
    ("7404476034", "900", "M", "F", "Pants");

INSERT INTO Wishlist
VALUES ("7404476034","1"),
("0000000000","2"),
("6969696969","3"),
("8888888888","4"),
("8989898989","5"),
("9810572925","6"),
("1111111111","7"),
("0909090909","7"),
("7404476034","2"),
("7404476034","4");


INSERT INTO Cart(Phone_Number, Total_Cost)
VALUES ("0000000000","560"),
("7404476034","1900"),
("6969696969","800"),
("1111111111","900"),
("8989898989","6900"),
("0909090909","800"),
("9810572925","900"),
("8888888888","560");

INSERT INTO Cart_info VALUES
(18,1),
(19,5),
(19,10),
(20,2),
(21,10),
(22,9),
(22,10),
(23,2),
(24,10),
(25,1);

INSERT INTO Payment(Phone_Number,Total_Cost,Card_expiry_date,Card_Number)
VALUES 
("0000000000","6000","2025-09-19","123456789"),
("1111111111","560","2025-08-19","123456788"),
("9810572925","786","2027-04-24","123456787"),
("0909090909","696",'2026-12-12',"123456786"),
("7404476034","420",'2024-11-11',"123456785"),
("6969696969","569",'2030-10-22',"123456784"),
("7404476034","1000",'2025-09-08',"123456783"),
("9810572925","900",'2026-05-05',"123456782");

INSERT INTO `Order`(Order_Date,Phone_Number,Total_Cost, Payment_ID)
VALUES("2024-02-10","0000000000","6000","1000"),
("2024-02-10","1111111111","560","1001"),
("2024-02-10","9810572925","786","1002"),
("2024-02-10","0909090909","696","1003"),
("2024-02-10","7404476034","420","1004"),
("2024-02-10","6969696969","569","1005"),
("2024-02-10","7404476034","1000","1006"),
("2024-02-10","9810572925","900","1007");

INSERT INTO Order_info VALUES
(508,9),
(509,1),
(510,4),
(511,8),
(512,7),
(513,6),
(514,5),
(515,10);

INSERT INTO Feedback(Rating, Feedback, Order_ID)
VALUES ("4.2","Good!","508"),
("3.9","Good product!","511"),
("4.2","Nice","510"),
("1","Not good quality","515"),
("3.5","Good!","512"),
("4.9","WOW!","509"),
("2.5","Satisfactory","513"),
("4","Good!","514");



______________________ QUERIES _____________________________________________________________________


--QUERY1 
SELECT u.Phone_Number, u.first_name
FROM user AS u
WHERE u.Phone_Number NOT IN
(SELECT p.Phone_Number 
FROM Product AS p);
-- Query to identify users who are not sellers 

--QUERY2
SELECT Phone_Number, first_name
FROM user 
WHERE city="New Delhi"
-- Query to find customers in New Delhi

--Query3
SELECT *
FROM `Order`
WHERE Total_Cost > (
    SELECT AVG(Total_Cost)
    FROM `Order`
);
--Query to find customers whose order price is greater than the average price of all orders

--Query4
SELECT Product_ID,Category, Price
FROM product
WHERE Product_ID NOT IN
(SELECT product_ID 
FROM order_info)
-- Query to find products which have not been ordered

--Query5
SELECT Product_ID, category,Price
FROM product
WHERE Product_ID IN
(SELECT Product_ID
FROM Cart_Info
GROUP BY Product_ID
HAVING COUNT(Product_ID) > 1);
-- Query to find the products which are present in more than one cart

--Query6
SELECT* FROM `Order`;
SELECT u.Phone_Number, u.First_Name, u.Last_Name
FROM user u
JOIN `Order` o ON u.Phone_Number = o.Phone_Number
GROUP BY u.Phone_Number
HAVING COUNT(o.Order_ID) > 1
-- Query to find users having multiple orders

--Query7
SELECT MAX(Rating) AS Max_User_Rating FROM Feedback;
-- Query to find maximum user rating

--Query8
SELECT u.Phone_Number, u.First_Name, u.Last_Name, COUNT(o.Order_ID) AS Order_Count
FROM user u
LEFT JOIN `Order` o ON u.Phone_Number = o.Phone_Number
GROUP BY u.Phone_Number, u.First_Name, u.Last_Name
ORDER BY Order_Count DESC;
-- Query to arrange the users in descending order according to the no. of orders they have 

--Query9
UPDATE user
SET last_name="Chahal"
WHERE phone_Number="8989898989"
-- Query to update the last name of the person with a particular phone number

--Query10
SELECT u.First_Name, u.Last_Name
FROM user u
LEFT JOIN `Order` o ON u.Phone_Number = o.Phone_Number
WHERE o.Order_ID IS NULL;
-- Query to find users who haven't made any orders
